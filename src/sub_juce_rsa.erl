%% This module is a convenience method for users of the JUCE C++ framework
%% (http://www.juce.com) that need to encrypt data that could be decrypted
%% with juce::RSAKey::applyToValue() method.
%%
%% Instead of embedding OpenSSL in your client application to decrypt the
%% datafile generated by Subscripterl, you can instead encrypt it using the
%% code from JUCE, here translated in Erlang.
%%
%% Note that I doubt this is as safe as the OpenSSL method.
%%
-module(sub_juce_rsa).

-export([apply_key_to/3, apply_publickey_to/2, apply_privatekey_to/2]).

apply_publickey_to([E, N, _D], Value) ->
  apply_key_to(E, N, Value).

apply_privatekey_to([_E, N, D], Value) ->
  apply_key_to(D, N, Value).

apply_key_to(Part1, Part2, Value) ->
  Res = apply_to_value(Part1, Part2, Value, 0),
  io_lib:format("~.16B", [Res]).

apply_to_value(_Part1, _Part2, 0, Acc) ->
  Acc;
apply_to_value(Part1, Part2, Value, Acc) ->
  {Divided, Remainder} = div_exp_mod(Value, Part1, Part2),
  Result = Acc * Part2 + Remainder,
  apply_to_value(Part1, Part2, Divided, Result).


div_exp_mod(Value, Part1, Part2) ->
  Divided = Value div Part2,
  IntDivRem = Value rem Part2,
  Remainder = crypto:mod_exp(IntDivRem, Part1, Part2),
  {Divided, Remainder}.
